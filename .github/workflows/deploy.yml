name: Zero-Downtime Deployment to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/mealsync-app
  HEALTH_CHECK_TIMEOUT: 300  # seconds

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Run Tests
        run: mvn test -B

      - name: Build Application
        run: mvn clean package -DskipTests -B

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max

      - name: Upload artifacts to EC2
        run: |
          echo "${{ secrets.EC2_KEY }}" > /tmp/ec2_key
          chmod 600 /tmp/ec2_key
          
          ssh -i /tmp/ec2_key -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
            "mkdir -p ~/mealsync && chmod 755 ~/mealsync"
          
          tar -czf - -C generated . | ssh -i /tmp/ec2_key -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
            "tar -xzf - -C ~/mealsync/"
          
          rm -f /tmp/ec2_key

  deploy-production:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Deploy with Zero Downtime
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -e
            cd ~/mealsync || exit 1

            # Clone repo if missing
            if [ ! -d .git ]; then
              echo "Repo missing, initializing..."
              git clone --depth=1 https://github.com/${{ github.repository }} . || true
            else
              git pull origin main || true
            fi

            # Check docker-compose file
            if [ ! -f docker-compose.prod.yml ]; then
              echo "ERROR: docker-compose.prod.yml not found!"
              exit 1
            fi

            # Pull latest Docker image
            docker pull ${{ env.DOCKER_IMAGE }}:latest

            # Initialize health check timer
            ELAPSED=0
            TIMEOUT=${{ env.HEALTH_CHECK_TIMEOUT }}

            # Start / rolling update
            if docker compose -f docker-compose.prod.yml ps | grep -q "mealsync-app"; then
              echo "Performing rolling update..."
              docker compose -f docker-compose.prod.yml up -d --no-deps --scale mealsync-app=2 mealsync-app
            else
              echo "First deployment..."
              docker compose -f docker-compose.prod.yml up -d
            fi

            # Wait for healthy containers
            while [ $ELAPSED -lt $TIMEOUT ]; do
              if docker compose -f docker-compose.prod.yml ps mealsync-app | grep -q "healthy"; then
                echo "Container healthy!"
                break
              fi
              sleep 5
              ELAPSED=$((ELAPSED + 5))
            done

            if [ $ELAPSED -ge $TIMEOUT ]; then
              echo "Health check timeout, rolling back..."
              docker compose -f docker-compose.prod.yml up -d --no-deps --scale mealsync-app=1 mealsync-app
              exit 1
            fi

            # Cleanup old images
            docker image prune -af --filter "until=48h"
            echo "Deployment complete."
