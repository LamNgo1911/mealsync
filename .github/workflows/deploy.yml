name: Zero-Downtime Deployment to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual trigger

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/mealsync-app
  HEALTH_CHECK_TIMEOUT: 120  # seconds

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Run Tests
        run: |
          mvn test -B \
            -Dmaven.test.failure.ignore=false \
            -Dspring.test.context.cache.maxSize=4 \
            -Dspring.main.banner-mode=off \
            -Djava.awt.headless=true \
            -Dfile.encoding=UTF-8 \
            --batch-mode \
            --show-version \
            --errors \
            --fail-fast
      - name: Build Application
        run: mvn clean package -DskipTests -B

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max

      - name: Create deployment artifacts
        run: |
          mkdir -p generated
          envsubst < env/env.template > generated/.env
          envsubst < env/env.template > generated/env.properties
          echo "${{ secrets.GOOGLE_CREDENTIALS_JSON }}" | base64 -d > generated/mealsync-451912-80d962e81ab0.json
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          RDS_ENDPOINT: ${{ secrets.RDS_ENDPOINT }}
          RDS_PORT: ${{ secrets.RDS_PORT }}
          RDS_DB_NAME: ${{ secrets.RDS_DB_NAME }}
          RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
          RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
          POSTGRES_ENDPOINT: ${{ secrets.POSTGRES_ENDPOINT }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_DB_NAME: ${{ secrets.POSTGRES_DB_NAME }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION }}
          JWT_REFRESH_EXPIRATION: ${{ secrets.JWT_REFRESH_EXPIRATION }}
          GEMINI_API_BASE_URL: ${{ secrets.GEMINI_API_BASE_URL }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
          STABILITY_API_KEY: ${{ secrets.STABILITY_API_KEY }}
          STABILITY_API_URL: ${{ secrets.STABILITY_API_URL }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}

      - name: Upload artifacts to EC2
        run: |
          echo "${{ secrets.EC2_KEY }}" > /tmp/ec2_key
          chmod 600 /tmp/ec2_key
          
          ssh -i /tmp/ec2_key \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
              "mkdir -p ~/mealsync && chmod 755 ~/mealsync"
          
          tar -czf - -C generated . | \
            ssh -i /tmp/ec2_key \
                -o StrictHostKeyChecking=no \
                -o UserKnownHostsFile=/dev/null \
                ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
                "tar -xzf - -C ~/mealsync/"
          
          rm -f /tmp/ec2_key
  deploy-production:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment:
      name: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Transfer files to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          SSH_KEY: ${{ secrets.EC2_KEY }}
        run: |
          # Create a temporary SSH key file with proper formatting
          SSH_KEY_FILE="$HOME/.ssh/ec2_key"
          mkdir -p "$(dirname "$SSH_KEY_FILE")"
          # Ensure the key is properly formatted with newlines
          echo "$SSH_KEY" | sed 's/\s*$//' > "$SSH_KEY_FILE"
          echo "" >> "$SSH_KEY_FILE"  # Ensure there's a newline at the end
          chmod 600 "$SSH_KEY_FILE"
          
          # Test SSH connection first
          echo "üîå Testing SSH connection..."
          if ! ssh -o StrictHostKeyChecking=no -i "$SSH_KEY_FILE" -q "$EC2_USERNAME@$EC2_HOST" exit; then
            echo "‚ùå SSH connection failed. Please check your EC2 instance and credentials."
            exit 1
          fi
          
          # Create necessary directories on EC2
          echo "üìÇ Creating directories on EC2..."
          ssh -o StrictHostKeyChecking=no -i "$SSH_KEY_FILE" "$EC2_USERNAME@$EC2_HOST" \
            "mkdir -p ~/mealsync/nginx" || {
              echo "‚ùå Failed to create directories on EC2"
              exit 1
            }
          
          # Create nginx directory and copy files with proper permissions
          echo "üì§ Transferring files to EC2..."
          
          # Create nginx directory first
          ssh -o StrictHostKeyChecking=no -i "$SSH_KEY_FILE" "$EC2_USERNAME@$EC2_HOST" \
            "mkdir -p ~/mealsync/nginx/ssl"
          
          # Transfer docker-compose.prod.yml
          rsync -avz --progress \
            -e "ssh -o StrictHostKeyChecking=no -i $SSH_KEY_FILE" \
            --chmod=644 \
            "$GITHUB_WORKSPACE/docker-compose.prod.yml" "$EC2_USERNAME@$EC2_HOST:~/mealsync/" || {
              echo "‚ùå Failed to transfer docker-compose.prod.yml"
              echo "Trying to copy from: $GITHUB_WORKSPACE/docker-compose.prod.yml"
              ls -la "$GITHUB_WORKSPACE/" || true
              exit 1
            }
          
          # Transfer nginx config
          rsync -avz --progress \
            -e "ssh -o StrictHostKeyChecking=no -i $SSH_KEY_FILE" \
            --chmod=644 \
            "$GITHUB_WORKSPACE/nginx/nginx.conf" "$EC2_USERNAME@$EC2_HOST:~/mealsync/nginx/" || {
              echo "‚ùå Failed to transfer nginx.conf"
              echo "Current directory: $(pwd)"
              echo "Trying to copy from: $GITHUB_WORKSPACE/nginx/nginx.conf"
              ls -la "$GITHUB_WORKSPACE/nginx/" || true
              exit 1
            }
          
          # Ensure nginx directory has correct permissions
          ssh -o StrictHostKeyChecking=no -i "$SSH_KEY_FILE" "$EC2_USERNAME@$EC2_HOST" \
            "chmod -R 755 ~/mealsync/nginx && \
             chmod 644 ~/mealsync/nginx/nginx.conf" || {
              echo "‚ùå Failed to set nginx permissions"
              exit 1
            }
          
          # Verify files were transferred
          echo "=== Verifying files on EC2 ==="
          ssh -o StrictHostKeyChecking=no -i "$SSH_KEY_FILE" "$EC2_USERNAME@$EC2_HOST" \
            "ls -la ~/mealsync/ && ls -la ~/mealsync/nginx/"
          
          # Clean up the SSH key
          rm -f "$SSH_KEY_FILE"
      - name: Deploy with Zero Downtime (Rolling Update)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -e
            echo "=== Starting deployment ==="
            
            # Check Docker status
            echo "=== Docker Status ==="
            docker --version
            docker compose version
            
            # Navigate to the deployment directory
            cd ~/mealsync
            echo "Current directory: $(pwd)"
            echo "Files in deployment directory:"
            ls -la
            
            # Verify required files exist
            if [ ! -f docker-compose.prod.yml ]; then
              echo "‚ùå Error: docker-compose.prod.yml not found in $(pwd)"
              ls -la
              exit 1
            fi
            
            if [ ! -d nginx ]; then
              echo "‚ùå Error: nginx directory not found in $(pwd)"
              ls -la
              exit 1
            fi
            
            cd ~/mealsync
            
            # Stop and remove any existing containers
            echo "üõë Stopping any running containers..."
            docker compose -f docker-compose.prod.yml down || true
            
            # Pull the latest image
            echo "üê≥ Pulling latest Docker image..."
            docker pull ${{ env.DOCKER_IMAGE }}:latest
            
            # Start the service
            echo "üöÄ Starting services..."
            docker compose -f docker-compose.prod.yml up -d
            
            # Wait for the service to be healthy
            echo "ü©∫ Waiting for container health..."
            ELAPSED=0
            TIMEOUT=120
            HEALTHY=false
            
            while [ $ELAPSED -lt $TIMEOUT ]; do
              if docker compose -f docker-compose.prod.yml ps | grep -q "healthy"; then
                echo "‚úÖ Service is healthy!"
                HEALTHY=true
                break
              fi
              echo "‚è≥ Waiting for service to become healthy... ($ELAPSED/$TIMEOUT seconds)"
              sleep 5
              ELAPSED=$((ELAPSED + 5))
            done
            
            if [ "$HEALTHY" = false ]; then
              echo "‚ùå Health check failed, showing logs..."
              docker compose -f docker-compose.prod.yml logs --tail=50
              exit 1
            fi
            
            echo "üßπ Cleaning up old images..."
            docker image prune -af --filter "until=48h"
            echo "‚úÖ Deployment complete."