name: Zero-Downtime Deployment to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual trigger

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/mealsync-app
  HEALTH_CHECK_TIMEOUT: 120  # seconds

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Run Tests
        run: |
          mvn test -B \
            -Dmaven.test.failure.ignore=false \
            -Dspring.test.context.cache.maxSize=4 \
            -Dspring.main.banner-mode=off \
            -Djava.awt.headless=true \
            -Dfile.encoding=UTF-8 \
            --batch-mode \
            --show-version \
            --errors \
            --fail-fast

      - name: Build Application
        run: mvn clean package -DskipTests -B

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max

      - name: Create deployment artifacts
        run: |
          mkdir -p generated
          envsubst < env/env.template > generated/.env
          envsubst < env/env.template > generated/env.properties
          echo "${{ secrets.GOOGLE_CREDENTIALS_JSON }}" | base64 -d > generated/mealsync-451912-80d962e81ab0.json
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          RDS_ENDPOINT: ${{ secrets.RDS_ENDPOINT }}
          RDS_PORT: ${{ secrets.RDS_PORT }}
          RDS_DB_NAME: ${{ secrets.RDS_DB_NAME }}
          RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
          RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
          POSTGRES_ENDPOINT: ${{ secrets.POSTGRES_ENDPOINT }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_DB_NAME: ${{ secrets.POSTGRES_DB_NAME }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION }}
          JWT_REFRESH_EXPIRATION: ${{ secrets.JWT_REFRESH_EXPIRATION }}
          GEMINI_API_BASE_URL: ${{ secrets.GEMINI_API_BASE_URL }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
          STABILITY_API_KEY: ${{ secrets.STABILITY_API_KEY }}
          STABILITY_API_URL: ${{ secrets.STABILITY_API_URL }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}

      - name: Upload artifacts to EC2
        run: |
          echo "${{ secrets.EC2_KEY }}" > /tmp/ec2_key
          chmod 600 /tmp/ec2_key
          
          ssh -i /tmp/ec2_key \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
              "mkdir -p ~/mealsync && chmod 755 ~/mealsync"
          
          tar -czf - -C generated . | \
            ssh -i /tmp/ec2_key \
                -o StrictHostKeyChecking=no \
                -o UserKnownHostsFile=/dev/null \
                ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
                "tar -xzf - -C ~/mealsync/"
          
          rm -f /tmp/ec2_key

  deploy-production:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment:
      name: production

    steps:
      - name: Checkout deployment scripts
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            scripts
            docker-compose.prod.yml
            nginx

      - name: Deploy with Zero Downtime (Rolling Update)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -e

            echo "=== Starting deployment ==="

            # Ensure mealsync directory and repo exist
            if [ ! -d ~/mealsync ]; then
              echo "üì¶ mealsync directory missing, cloning..."
              git clone https://github.com/LamNgo1911/mealsync.git ~/mealsync
            fi

            cd ~/mealsync

            if [ ! -d .git ]; then
              echo "‚ö†Ô∏è No .git found ‚Äî recloning repository..."
              cd ~
              rm -rf mealsync
              git clone https://github.com/LamNgo1911/mealsync.git ~/mealsync
              cd ~/mealsync
            else
              echo "üîÑ Pulling latest code..."
              git fetch origin main
              git reset --hard origin/main || true
            fi

            # Verify docker-compose file
            if [ ! -f docker-compose.prod.yml ]; then
              echo "‚ùå ERROR: docker-compose.prod.yml not found!"
              exit 1
            fi

            echo "‚úÖ Repository ready. Pulling Docker image..."
            docker pull ${{ env.DOCKER_IMAGE }}:latest

            ELAPSED=0
            TIMEOUT=${{ env.HEALTH_CHECK_TIMEOUT }}

            # Rolling update logic
            if docker compose -f docker-compose.prod.yml ps | grep -q "mealsync-app"; then
              echo "üöÄ Performing rolling update..."
              docker compose -f docker-compose.prod.yml up -d --no-deps --scale mealsync-app=2 mealsync-app
            else
              echo "üÜï First-time deployment..."
              docker compose -f docker-compose.prod.yml up -d
            fi

            echo "ü©∫ Waiting for container health..."
            while [ $ELAPSED -lt $TIMEOUT ]; do
              if docker compose -f docker-compose.prod.yml ps mealsync-app | grep -q "healthy"; then
                echo "‚úÖ Healthy!"
                break
              fi
              sleep 5
              ELAPSED=$((ELAPSED + 5))
            done

            if [ $ELAPSED -ge $TIMEOUT ]; then
              echo "‚ùå Health check timeout, rolling back..."
              docker compose -f docker-compose.prod.yml up -d --no-deps --scale mealsync-app=1 mealsync-app
              exit 1
            fi

            echo "üßπ Cleaning up old images..."
            docker image prune -af --filter "until=48h"
            echo "‚úÖ Deployment complete."
