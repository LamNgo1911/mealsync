name: Zero-Downtime Deployment to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual trigger

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/mealsync-app
  HEALTH_CHECK_TIMEOUT: 120  # seconds

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Run Tests
        run: |
          mvn test -B \
            -Dmaven.test.failure.ignore=false \
            -Dspring.test.context.cache.maxSize=4 \
            -Dspring.main.banner-mode=off \
            -Djava.awt.headless=true \
            -Dfile.encoding=UTF-8 \
            --batch-mode \
            --show-version \
            --errors \
            --fail-fast

      - name: Build Application
        run: mvn clean package -DskipTests -B

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max

      - name: Create deployment artifacts
        run: |
          mkdir -p generated
          envsubst < env/env.template > generated/.env
          envsubst < env/env.template > generated/env.properties
          echo "${{ secrets.GOOGLE_CREDENTIALS_JSON }}" | base64 -d > generated/mealsync-451912-80d962e81ab0.json
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          RDS_ENDPOINT: ${{ secrets.RDS_ENDPOINT }}
          RDS_PORT: ${{ secrets.RDS_PORT }}
          RDS_DB_NAME: ${{ secrets.RDS_DB_NAME }}
          RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
          RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
          POSTGRES_ENDPOINT: ${{ secrets.POSTGRES_ENDPOINT }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_DB_NAME: ${{ secrets.POSTGRES_DB_NAME }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION }}
          JWT_REFRESH_EXPIRATION: ${{ secrets.JWT_REFRESH_EXPIRATION }}
          GEMINI_API_BASE_URL: ${{ secrets.GEMINI_API_BASE_URL }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
          STABILITY_API_KEY: ${{ secrets.STABILITY_API_KEY }}
          STABILITY_API_URL: ${{ secrets.STABILITY_API_URL }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}

      - name: Upload artifacts to EC2
        run: |
          echo "Setting up SSH key..."
          echo "${{ secrets.EC2_KEY }}" > /tmp/ec2_key
          chmod 600 /tmp/ec2_key
          
          echo "Diagnosing SSH service issue..."
          # Test multiple aspects to identify the specific problem

          # Test 1: Basic connectivity (already know this works)
          echo "‚úì TCP connectivity confirmed"

          # Test 2: Check if SSH daemon process exists
          if timeout 10 ssh -i /tmp/ec2_key \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -o ConnectTimeout=5 \
              -o BatchMode=yes \
              ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
              "pgrep -f sshd | head -5"; then
            echo "‚úì SSH daemon process exists"
          else
            echo "‚ùå SSH daemon process not found"
          fi

          # Test 3: Check system resources that might affect SSH
          if timeout 10 ssh -i /tmp/ec2_key \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -o ConnectTimeout=5 \
              -o BatchMode=yes \
              ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
              "echo 'Disk:' && df -h / | tail -1 && echo 'Memory:' && free -h | grep Mem"; then
            echo "‚úì System resources accessible"
          else
            echo "‚ùå Cannot check system resources"
          fi

          # Test 4: Try to restart SSH service
          if timeout 15 ssh -i /tmp/ec2_key \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -o ConnectTimeout=5 \
              -o BatchMode=yes \
              ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
              "sudo systemctl restart sshd && sleep 3 && systemctl is-active sshd"; then
            echo "‚úì SSH service restarted successfully"
          else
            echo "‚ùå SSH service restart failed"
          fi

          # Test 5: Final connectivity test
          if timeout 10 ssh -i /tmp/ec2_key \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -o ConnectTimeout=5 \
              -o BatchMode=yes \
              ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
              "echo 'SSH connectivity restored'"; then
            echo "‚úÖ SSH connectivity restored!"
          else
            echo "‚ùå SSH still not responding"
            echo ""
            echo "üö® Manual Intervention Required:"
            echo ""
            echo "The SSH service appears to be in a bad state."
            echo "You need to access the instance through AWS Console:"
            echo ""
            echo "1. Go to EC2 Console ‚Üí Instances"
            echo "2. Select your instance"
            echo "3. Click 'Connect' ‚Üí 'Session Manager'"
            echo "4. Run these commands in Session Manager:"
            echo "   sudo systemctl status sshd"
            echo "   sudo systemctl stop sshd"
            echo "   sudo systemctl start sshd"
            echo "   sudo systemctl enable sshd"
            echo "   sudo reboot"
            echo ""
            echo "5. After reboot, test SSH connectivity again"
            exit 1
          fi

          echo "Creating directory on EC2..."
          timeout 60 ssh -i /tmp/ec2_key \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -o ConnectTimeout=30 \
              -o ServerAliveInterval=60 \
              ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
              "mkdir -p ~/mealsync && chmod 755 ~/mealsync"
          
          echo "Uploading configuration files..."
          # Use faster compression and better timeout handling
          tar -czf - -C generated . | \
            timeout 300 ssh -i /tmp/ec2_key \
                -o StrictHostKeyChecking=no \
                -o UserKnownHostsFile=/dev/null \
                -o ConnectTimeout=60 \
                -o ServerAliveInterval=30 \
                ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
                "tar -xzf - -C ~/mealsync/"
          
          echo "Cleaning up temporary files..."
          rm -f /tmp/ec2_key
          echo "‚úÖ Configuration upload completed"

  deploy-production:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment:
      name: production

    steps:
      - name: Checkout deployment scripts
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            scripts
            docker-compose.prod.yml
            nginx

      - name: Deploy with Zero Downtime (Rolling Update)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -e
            
            cd ~/mealsync || exit 1
            
            # Pull latest code and configs
            git pull origin main || true
            
            # Pull new Docker image
            docker pull ${{ env.DOCKER_IMAGE }}:latest
            
            # Check if containers are running
            if docker compose -f docker-compose.prod.yml ps | grep -q "mealsync-app"; then
              echo "Performing rolling update..."
              echo "Starting new container..."
              docker compose -f docker-compose.prod.yml up -d --no-deps --scale mealsync-app=2 mealsync-app

              # Wait a bit for containers to start

              echo "Waiting for containers to initialize..."
              sleep 30

              # Show initial container status

              echo "=== Initial Container Status ==="

              docker compose -f docker-compose.prod.yml ps

              # Wait for new container to be healthy

              echo "Waiting for new container to be healthy..."
              TIMEOUT=300  # Increased to 5 minutes

              
              while [ $ELAPSED -lt $TIMEOUT ]; do

                echo "Checking container health... ($ELAPSED/$TIMEOUT seconds)"

                # Show current container status

                echo "=== Current Container Status ==="

                docker compose -f docker-compose.prod.yml ps

                
                # Check if any container is healthy

                if docker compose -f docker-compose.prod.yml ps mealsync-app | grep -q "healthy"; then

                  echo "New container is healthy!"
                  break

                fi

                

                # Fallback: Check if port 8081 is responding (basic connectivity check)

                if curl -s http://localhost:8081/actuator/health > /dev/null 2>&1; then

                  echo "Application is responding on port 8081!"

                  break

                fi

                

                # Check if containers are still running (not exited)

                if ! docker compose -f docker-compose.prod.yml ps mealsync-app | grep -q "Up"; then

                  echo "Container has stopped! Checking logs..."
                  echo "=== Container Logs ==="

                  docker compose -f docker-compose.prod.yml logs --tail=50 mealsync-app

                  echo "Deployment failed! Check container logs above."

                  exit 1

                fi

                
                sleep 10

                ELAPSED=$((ELAPSED + 10))

                echo "Still waiting... ($ELAPSED/$TIMEOUT seconds)"

              done

              
              if [ $ELAPSED -ge $TIMEOUT ]; then

                echo "Health check timeout! Checking final status and logs..."
                echo "=== Final Container Status ==="

                docker compose -f docker-compose.prod.yml ps

                echo "=== Container Logs ==="

                docker compose -f docker-compose.prod.yml logs --tail=100 mealsync-app

                echo "Rolling back due to health check timeout..."
                docker compose -f docker-compose.prod.yml up -d --no-deps --scale mealsync-app=1 mealsync-app

                exit 1

              fi
              
              # Gracefully stop old container
              echo "Stopping old container gracefully..."
              docker compose -f docker-compose.prod.yml up -d --no-deps --scale mealsync-app=1 --remove-orphans mealsync-app
              # Wait for graceful shutdown
              sleep 10
              
            else
              echo "First deployment, starting containers..."
              docker compose -f docker-compose.prod.yml up -d
            fi
            
            # Cleanup old images
            echo "Cleaning up old Docker images..."
            docker image prune -af --filter "until=48h"
            
            # Show deployment status
            echo "=== Deployment Status ==="
            docker compose -f docker-compose.prod.yml ps
            
            echo "=== Container Health ==="
            docker compose -f docker-compose.prod.yml exec -T mealsync-app wget -qO- http://localhost:8081/actuator/health || echo "Health check endpoint not responding"
            
            echo "=== Disk Usage ==="
            df -h / | grep -v tmpfs

      - name: Verify Deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Wait a bit for the service to stabilize
            sleep 10

            echo "=== Verifying Deployment ==="
            echo "Current time: $(date)"
            echo "Current directory: $(pwd)"

            # Check all Docker containers status first
            echo "=== All Docker Container Status ==="
            docker compose -f ~/mealsync/docker-compose.prod.yml ps

            # Check application container logs if it's restarting
            echo ""
            echo "=== Application Container Logs ==="
            if docker compose -f ~/mealsync/docker-compose.prod.yml ps mealsync-app | grep -q "Restarting"; then
              echo "Application container is restarting - checking logs..."
              docker compose -f ~/mealsync/docker-compose.prod.yml logs --tail=50 mealsync-app
            fi

            # Check if nginx container is running
            echo ""
            echo "=== Checking Nginx Container ==="
            if docker ps | grep -q "mealsync-nginx"; then
              echo "‚úÖ Nginx container is running"

              # Test nginx internal health endpoint
              echo "Testing nginx internal health endpoint..."
              if docker exec mealsync-nginx wget -qO- http://localhost:8080/nginx-health 2>/dev/null; then
                echo "‚úÖ Nginx internal health check passed"
              else
                echo "‚ùå Nginx internal health check failed"
                echo "Nginx error logs:"
                docker exec mealsync-nginx cat /var/log/nginx/error.log 2>/dev/null | tail -10 || echo "No error logs"
              fi

            else
              echo "‚ùå Nginx container is not running"
              echo "=== Nginx Container Logs ==="
              docker compose -f ~/mealsync/docker-compose.prod.yml logs --tail=20 nginx || echo "No nginx logs available"
            fi

            # Check if mealsync-app containers are running
            echo ""
            echo "=== Checking Application Containers ==="
            APP_COUNT=$(docker ps | grep -c "mealsync-mealsync-app")

            if [ "$APP_COUNT" -gt 0 ]; then
              echo "‚úÖ Found $APP_COUNT mealsync-app container(s) running"

              # Test direct application health (if accessible)
              echo "Testing direct application access..."
              if curl -s http://localhost:8081/actuator/health >/dev/null 2>&1; then
                echo "‚úÖ Application is directly accessible on port 8081"
              else
                echo "‚ùå Application is not directly accessible on port 8081"
                echo "Application container logs:"
                docker compose -f ~/mealsync/docker-compose.prod.yml logs --tail=20 mealsync-app
              fi

            else
              echo "‚ùå No mealsync-app containers are running"
              echo "This might be due to application startup failures"
              echo "=== Application Container Logs ==="
              docker compose -f ~/mealsync/docker-compose.prod.yml logs --tail=50 mealsync-app
            fi

            # Check nginx responsiveness on port 80 (even if app is failing)
            echo ""
            echo "=== Testing Nginx on Port 80 ==="
            if curl -s -I --max-time 10 http://localhost | head -1 | grep -q "200\|301\|302"; then
              echo "‚úÖ Nginx is responding successfully on port 80!"
            else
              echo "‚ùå Nginx is not responding on port 80"
              echo "This suggests nginx startup issues"
            fi

            # Final assessment
            echo ""
            echo "=== Deployment Assessment ==="
            if docker ps | grep -q "mealsync-nginx" && curl -s -I --max-time 5 http://localhost >/dev/null 2>&1; then
              echo "‚úÖ Deployment appears successful - nginx is running and responding"
            else
              echo "‚ùå Deployment has issues - checking final status"
              docker compose -f ~/mealsync/docker-compose.prod.yml ps
              exit 1
            fi

      - name: Notify on Failure
        if: failure()
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "Deployment failed! Checking logs..."
            docker compose -f ~/mealsync/docker-compose.prod.yml logs --tail=50 mealsync-app
