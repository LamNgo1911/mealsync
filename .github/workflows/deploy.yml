name: Deploy Docker Image to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/mealsync-app:latest

      - name: Create .env, env.properties, and decode Google credentials
        run: |
          mkdir -p generated
          # Generate env files
          envsubst < env/env.template > generated/.env
          envsubst < env/env.template > generated/env.properties
          
          # Decode Google credentials from GitHub secret
          echo "${{ secrets.GOOGLE_CREDENTIALS_JSON }}" | base64 -d > generated/mealsync-451912-80d962e81ab0.json
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}

          RDS_ENDPOINT: ${{ secrets.RDS_ENDPOINT }}
          RDS_PORT: ${{ secrets.RDS_PORT }}
          RDS_DB_NAME: ${{ secrets.RDS_DB_NAME }}
          RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
          RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}

          POSTGRES_ENDPOINT: ${{ secrets.POSTGRES_ENDPOINT }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_DB_NAME: ${{ secrets.POSTGRES_DB_NAME }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION }}
          JWT_REFRESH_EXPIRATION: ${{ secrets.JWT_REFRESH_EXPIRATION }}

          GEMINI_API_BASE_URL: ${{ secrets.GEMINI_API_BASE_URL }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}

          STABILITY_API_KEY: ${{ secrets.STABILITY_API_KEY }}
          STABILITY_API_URL: ${{ secrets.STABILITY_API_URL }}

          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}

      - name: Verify generated files
        run: |
          echo "Files to upload:"
          ls -lah generated/
          echo "File count: $(ls -1 generated/ | wc -l)"

      - name: Upload files to EC2
        run: |
          # Save SSH key
          echo "${{ secrets.EC2_KEY }}" > /tmp/ec2_key
          chmod 600 /tmp/ec2_key
          
          # Ensure directory exists
          echo "Creating mealsync directory on EC2..."
          ssh -i /tmp/ec2_key \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
              "mkdir -p ~/mealsync && chmod 755 ~/mealsync"
          
          # Transfer files using tar stream
          echo "Transferring files to EC2..."
          tar -czf - -C generated . | \
            ssh -i /tmp/ec2_key \
                -o StrictHostKeyChecking=no \
                -o UserKnownHostsFile=/dev/null \
                ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
                "tar -xzf - -C ~/mealsync/"
          
          # Verify files were transferred
          echo "Verifying transfer..."
          ssh -i /tmp/ec2_key \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
              "ls -lah ~/mealsync/"
          
          # Clean up
          rm -f /tmp/ec2_key
          echo "Upload complete!"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd ~/mealsync || git clone https://github.com/LamNgo1911/mealsync.git ~/mealsync
            cd ~/mealsync
            git pull origin main
            docker compose -f docker-compose.prod.yml down
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d
            echo "Deployment complete!"
            docker compose -f docker-compose.prod.yml ps