name: Zero-Downtime Deployment to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/mealsync-app
  HEALTH_CHECK_TIMEOUT: 300 # seconds

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Run Tests
        run: mvn test -B

      - name: Build Application
        run: mvn clean package -DskipTests -B

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max

  deploy-production:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Deploy with Zero Downtime
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -e
            echo "=== Starting Deployment ==="

            # Ensure docker & git exist
            if ! command -v docker &>/dev/null; then
              echo "Installing Docker..."
              sudo apt-get update -y
              sudo apt-get install -y docker.io docker-compose-plugin
            fi

            if ! command -v git &>/dev/null; then
              echo "Installing Git..."
              sudo apt-get update -y
              sudo apt-get install -y git
            fi

            # Move into deployment folder
            cd ~

            if [ ! -d mealsync ]; then
              echo "üì¶ Cloning repository (fresh)..."
              git clone https://github.com/${{ github.repository }} mealsync
              cd mealsync
            else
              cd mealsync
              if [ ! -d .git ]; then
                echo "‚ö†Ô∏è No .git folder found ‚Äî recloning repo"
                cd ..
                rm -rf mealsync
                git clone https://github.com/${{ github.repository }} mealsync
                cd mealsync
              else
                echo "üîÑ Pulling latest code..."
                git fetch origin main
                git reset --hard origin/main
              fi
            fi

            # Verify docker-compose file
            if [ ! -f docker-compose.prod.yml ]; then
              echo "‚ùå ERROR: docker-compose.prod.yml not found!"
              ls -la
              exit 1
            fi

            echo "‚úÖ Repository ready. Pulling latest image..."
            docker pull ${{ env.DOCKER_IMAGE }}:latest

            ELAPSED=0
            TIMEOUT=${{ env.HEALTH_CHECK_TIMEOUT }}

            if docker compose -f docker-compose.prod.yml ps | grep -q "mealsync-app"; then
              echo "üöÄ Performing rolling update..."
              docker compose -f docker-compose.prod.yml up -d --no-deps --scale mealsync-app=2 mealsync-app
            else
              echo "üÜï First-time deployment..."
              docker compose -f docker-compose.prod.yml up -d
            fi

            echo "ü©∫ Waiting for containers to become healthy..."
            while [ $ELAPSED -lt $TIMEOUT ]; do
              if docker compose -f docker-compose.prod.yml ps mealsync-app | grep -q "healthy"; then
                echo "‚úÖ Application is healthy!"
                break
              fi
              sleep 5
              ELAPSED=$((ELAPSED + 5))
            done

            if [ $ELAPSED -ge $TIMEOUT ]; then
              echo "‚ùå Health check timeout, rolling back..."
              docker compose -f docker-compose.prod.yml up -d --no-deps --scale mealsync-app=1 mealsync-app
              exit 1
            fi

            echo "üßπ Cleaning up old images..."
            docker image prune -af --filter "until=48h"

            echo "‚úÖ Deployment complete!"
