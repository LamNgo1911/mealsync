name: Zero-Downtime Deployment to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual trigger

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/mealsync-app
  HEALTH_CHECK_TIMEOUT: 120  # seconds

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Run Tests
        run: |
          mvn test -B \
            -Dmaven.test.failure.ignore=false \
            -Dspring.test.context.cache.maxSize=4 \
            -Dspring.main.banner-mode=off \
            -Djava.awt.headless=true \
            -Dfile.encoding=UTF-8 \
            --batch-mode \
            --show-version \
            --errors \
            --fail-fast

      - name: Build Application
        run: mvn clean package -DskipTests -B

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max

      - name: Create deployment artifacts
        run: |
          mkdir -p generated
          envsubst < env/env.template > generated/.env
          envsubst < env/env.template > generated/env.properties
          echo "${{ secrets.GOOGLE_CREDENTIALS_JSON }}" | base64 -d > generated/mealsync-451912-80d962e81ab0.json
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          RDS_ENDPOINT: ${{ secrets.RDS_ENDPOINT }}
          RDS_PORT: ${{ secrets.RDS_PORT }}
          RDS_DB_NAME: ${{ secrets.RDS_DB_NAME }}
          RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
          RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
          POSTGRES_ENDPOINT: ${{ secrets.POSTGRES_ENDPOINT }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_DB_NAME: ${{ secrets.POSTGRES_DB_NAME }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION }}
          JWT_REFRESH_EXPIRATION: ${{ secrets.JWT_REFRESH_EXPIRATION }}
          GEMINI_API_BASE_URL: ${{ secrets.GEMINI_API_BASE_URL }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
          STABILITY_API_KEY: ${{ secrets.STABILITY_API_KEY }}
          STABILITY_API_URL: ${{ secrets.STABILITY_API_URL }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}

      - name: Upload artifacts to EC2
        run: |
          echo "${{ secrets.EC2_KEY }}" > /tmp/ec2_key
          chmod 600 /tmp/ec2_key
          
          ssh -i /tmp/ec2_key \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
              "mkdir -p ~/mealsync && chmod 755 ~/mealsync"
          
          tar -czf - -C generated . | \
            ssh -i /tmp/ec2_key \
                -o StrictHostKeyChecking=no \
                -o UserKnownHostsFile=/dev/null \
                ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
                "tar -xzf - -C ~/mealsync/"
          
          rm -f /tmp/ec2_key

  deploy-production:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment:
      name: production

    steps:
      - name: Checkout deployment scripts
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            scripts
            docker-compose.prod.yml
            nginx

      - name: Deploy with Zero Downtime (Rolling Update)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -e
            
            cd ~/mealsync || exit 1
            
            # Pull latest code and configs
            git pull origin main || true
            
            # Pull new Docker image
            echo "Pulling new Docker image..."
            docker pull ${{ env.DOCKER_IMAGE }}:latest
            
            # Check if containers are running
            if docker compose -f docker-compose.prod.yml ps | grep -q "mealsync-app"; then
              echo "Performing rolling update..."
              
              # Scale up with new version (blue-green approach)
              echo "Starting new container..."
              docker compose -f docker-compose.prod.yml up -d --no-deps --scale mealsync-app=2 mealsync-app
              
              # Wait for new container to be healthy
              echo "Waiting for new container to be healthy..."
              TIMEOUT=${{ env.HEALTH_CHECK_TIMEOUT }}
              ELAPSED=0
              
              while [ $ELAPSED -lt $TIMEOUT ]; do
                if docker compose -f docker-compose.prod.yml ps mealsync-app | grep -q "healthy"; then
                  echo "New container is healthy!"
                  break
                fi
                sleep 5
                ELAPSED=$((ELAPSED + 5))
                echo "Waiting... ($ELAPSED/$TIMEOUT seconds)"
              done
              
              if [ $ELAPSED -ge $TIMEOUT ]; then
                echo "Health check timeout! Rolling back..."
                docker compose -f docker-compose.prod.yml up -d --no-deps --scale mealsync-app=1 mealsync-app
                exit 1
              fi
              
              # Gracefully stop old container
              echo "Stopping old container gracefully..."
              docker compose -f docker-compose.prod.yml up -d --no-deps --scale mealsync-app=1 --remove-orphans mealsync-app
              
              # Wait for graceful shutdown
              sleep 10
              
            else
              echo "First deployment, starting containers..."
              docker compose -f docker-compose.prod.yml up -d
            fi
            
            # Cleanup old images
            echo "Cleaning up old Docker images..."
            docker image prune -af --filter "until=48h"
            
            # Show deployment status
            echo "=== Deployment Status ==="
            docker compose -f docker-compose.prod.yml ps
            
            echo "=== Container Health ==="
            docker compose -f docker-compose.prod.yml exec -T mealsync-app wget -qO- http://localhost:8081/actuator/health || echo "Health check endpoint not responding"
            
            echo "=== Disk Usage ==="
            df -h / | grep -v tmpfs

      - name: Verify Deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Wait a bit for the service to stabilize
            sleep 10
            
            # Check if the application is responding
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/actuator/health)
            
            if [ "$RESPONSE" = "200" ]; then
              echo "✅ Deployment successful! Application is healthy."
              exit 0
            else
              echo "❌ Deployment verification failed! HTTP status: $RESPONSE"
              exit 1
            fi

      - name: Notify on Failure
        if: failure()
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "Deployment failed! Checking logs..."
            docker compose -f ~/mealsync/docker-compose.prod.yml logs --tail=50 mealsync-app
