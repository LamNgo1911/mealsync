name: Zero-Downtime Deployment to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual trigger

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/mealsync-app
  HEALTH_CHECK_TIMEOUT: 120  # seconds

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Run Tests
        run: |
          mvn test -B \
            -Dmaven.test.failure.ignore=false \
            -Dspring.test.context.cache.maxSize=4 \
            -Dspring.main.banner-mode=off \
            -Djava.awt.headless=true \
            -Dfile.encoding=UTF-8 \
            --batch-mode \
            --show-version \
            --errors \
            --fail-fast
      - name: Build Application
        run: mvn clean package -DskipTests -B

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max

      - name: Create deployment artifacts
        run: |
          mkdir -p generated
          envsubst < env/env.template > generated/.env
          envsubst < env/env.template > generated/env.properties
          echo "${{ secrets.GOOGLE_CREDENTIALS_JSON }}" | base64 -d > generated/mealsync-451912-80d962e81ab0.json
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          RDS_ENDPOINT: ${{ secrets.RDS_ENDPOINT }}
          RDS_PORT: ${{ secrets.RDS_PORT }}
          RDS_DB_NAME: ${{ secrets.RDS_DB_NAME }}
          RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
          RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
          POSTGRES_ENDPOINT: ${{ secrets.POSTGRES_ENDPOINT }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_DB_NAME: ${{ secrets.POSTGRES_DB_NAME }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION }}
          JWT_REFRESH_EXPIRATION: ${{ secrets.JWT_REFRESH_EXPIRATION }}
          GEMINI_API_BASE_URL: ${{ secrets.GEMINI_API_BASE_URL }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
          STABILITY_API_KEY: ${{ secrets.STABILITY_API_KEY }}
          STABILITY_API_URL: ${{ secrets.STABILITY_API_URL }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}

      - name: Upload artifacts to EC2
        run: |
          echo "${{ secrets.EC2_KEY }}" > /tmp/ec2_key
          chmod 600 /tmp/ec2_key
          
          ssh -i /tmp/ec2_key \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
              "mkdir -p ~/mealsync && chmod 755 ~/mealsync"
          
          tar -czf - -C generated . | \
            ssh -i /tmp/ec2_key \
                -o StrictHostKeyChecking=no \
                -o UserKnownHostsFile=/dev/null \
                ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
                "tar -xzf - -C ~/mealsync/"
          
          rm -f /tmp/ec2_key
  deploy-production:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment:
      name: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Transfer files to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          SSH_KEY: ${{ secrets.EC2_KEY }}
        run: |
          # Create a temporary SSH key file
          echo "${{ secrets.EC2_KEY }}" > /tmp/ec2_key
          chmod 600 /tmp/ec2_key
          
          # Create directory on EC2
          ssh -i /tmp/ec2_key \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
              "mkdir -p ~/mealsync/nginx"
          
          # Transfer docker-compose.prod.yml
          scp -i /tmp/ec2_key \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              "$GITHUB_WORKSPACE/docker-compose.prod.yml" \
              ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/mealsync/
          
          # Transfer nginx config
          scp -i /tmp/ec2_key \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              "$GITHUB_WORKSPACE/nginx/nginx.conf" \
              ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/mealsync/nginx/
          
          # Set proper permissions
          ssh -i /tmp/ec2_key \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
              "chmod 755 ~/mealsync/nginx && chmod 644 ~/mealsync/nginx/nginx.conf"
          
          # Clean up
          rm -f /tmp/ec2_key
      - name: Deploy with Zero Downtime (Rolling Update)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            #!/bin/bash
            set -e

            # Configuration
            COMPOSE_FILE="docker-compose.prod.yml"
            HEALTH_TIMEOUT=120
            SLEEP_INTERVAL=5

            # Colors for output
            RED='\033[0;31m'
            GREEN='\033[0;32m'
            YELLOW='\033[1;33m'
            NC='\033[0m' # No Color

            log_info() {
              echo -e "${GREEN}[INFO]${NC} $*"
            }

            log_warn() {
              echo -e "${YELLOW}[WARN]${NC} $*"
            }

            log_error() {
              echo -e "${RED}[ERROR]${NC} $*"
            }

            check_service_health() {
              local service_name="$1"
              local elapsed=0

              log_info "Checking health for service: $service_name"

              # Skip health check for services without health checks configured
              if ! docker compose -f "$COMPOSE_FILE" ps "$service_name" | grep -q "health"; then
                log_info "‚è≥ Service $service_name doesn't have health checks, waiting 10s..."
                sleep 10
                log_info "‚úÖ Service $service_name is ready (no health check configured)!"
                return 0
              fi

              while [ $elapsed -lt $HEALTH_TIMEOUT ]; do
                if docker compose -f "$COMPOSE_FILE" ps "$service_name" | grep -q "healthy"; then
                  log_info "‚úÖ Service $service_name is healthy!"
                  return 0
                fi

                log_warn "‚è≥ Waiting for $service_name to become healthy... (${elapsed}/${HEALTH_TIMEOUT}s)"
                sleep $SLEEP_INTERVAL
                elapsed=$((elapsed + SLEEP_INTERVAL))
              done

              log_error "‚ùå Service $service_name health check failed!"
              return 1
            }

            update_service() {
              local service_name="$1"
              log_info "üîÑ Updating service: $service_name"

              # Pull latest image for this service
              docker compose -f "$COMPOSE_FILE" pull "$service_name"

              # Update the service (rolling update)
              docker compose -f "$COMPOSE_FILE" up -d --no-recreate "$service_name"

              # Wait for health
              if ! check_service_health "$service_name"; then
                log_error "Failed to update $service_name"
                return 1
              fi

              log_info "‚úÖ Successfully updated $service_name"
              return 0
            }

            main() {
              log_info "üöÄ Starting zero-downtime deployment"

              # Navigate to deployment directory
              cd ~/mealsync || {
                log_error "Failed to navigate to deployment directory"
                exit 1
              }

              log_info "üìÅ Working directory: $(pwd)"

              # Verify Docker
              log_info "üê≥ Checking Docker versions..."
              docker --version
              docker compose version

              # Verify required files
              log_info "üîç Verifying deployment files..."
              if [ ! -f "$COMPOSE_FILE" ]; then
                log_error "Missing $COMPOSE_FILE"
                ls -la
                exit 1
              fi

              if [ ! -d "nginx" ]; then
                log_error "Missing nginx directory"
                ls -la
                exit 1
              fi

              # Get list of services to update
              SERVICES=$(docker compose -f "$COMPOSE_FILE" config --services | grep -v nginx || echo "mealsync-app")

              log_info "üìã Services to update: $SERVICES"

              # Update services one by one (rolling update)
              for service in $SERVICES; do
                if ! update_service "$service"; then
                  log_error "‚ùå Rolling update failed at service: $service"
                  log_info "üìã Showing recent logs for debugging..."
                  docker compose -f "$COMPOSE_FILE" logs --tail=20 "$service"
                  exit 1
                fi
              done

              # Update nginx last (reverse proxy)
              if docker compose -f "$COMPOSE_FILE" config --services | grep -q nginx; then
                log_info "üåê Updating nginx (reverse proxy)..."
                docker compose -f "$COMPOSE_FILE" up -d --no-recreate nginx

                if ! check_service_health "nginx"; then
                  log_error "‚ùå Nginx update failed!"
                  exit 1
                fi
              fi

              # Cleanup old images (only after successful deployment)
              log_info "üßπ Cleaning up old Docker images..."
              docker image prune -af --filter "until=48h"

              log_info "‚úÖ Zero-downtime deployment completed successfully!"

              # Show final status
              log_info "üìä Final service status:"
              docker compose -f "$COMPOSE_FILE" ps
            }

            main